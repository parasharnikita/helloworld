import React from 'react';
import { Autocomplete, TextField, Popper, ListSubheader } from '@mui/material';
import { VariableSizeList } from 'react-window';
import { makeStyles, styled } from '@mui/styles';

const useStyles = makeStyles({
  listbox: {
    '& ul': {
      padding: 0,
      margin: 0,
    },
  },
});

const LISTBOX_PADDING = 8; // px

const OuterElementContext = React.createContext({});

const OuterElementType = React.forwardRef((props, ref) => {
  const outerProps = React.useContext(OuterElementContext);
  return <div ref={ref} {...props} {...outerProps} />;
});

function renderRow(props) {
  const { data, index, style } = props;
  const dataSet = data[index];
  const inlineStyle = {
    ...style,
    top: style.top + LISTBOX_PADDING,
  };

  return (
    <div {...dataSet[0]} style={inlineStyle}>
      {dataSet[1]}
    </div>
  );
}

const ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {
  const { children, ...other } = props;
  const itemData = [];
  children.forEach((item) => {
    itemData.push(item);
    itemData.push(...(item.children || []));
  });

  const itemCount = itemData.length;
  const itemSize = 36;

  const getChildSize = (child) => {
    if (child.hasOwnProperty('group')) {
      return 48;
    }
    return itemSize;
  };

  const getItemSize = (index) => getChildSize(itemData[index]);

  const gridRef = React.useRef(null);
  React.useEffect(() => {
    if (gridRef.current != null) {
      gridRef.current.resetAfterIndex(0, true);
    }
  }, [itemCount]);

  return (
    <div ref={ref}>
      <OuterElementContext.Provider value={other}>
        <VariableSizeList
          itemData={itemData}
          height={250}
          width="100%"
          ref={gridRef}
          outerElementType={OuterElementType}
          innerElementType="ul"
          itemSize={getItemSize}
          itemCount={itemCount}
          overscanCount={5}
        >
          {renderRow}
        </VariableSizeList>
      </OuterElementContext.Provider>
    </div>
  );
});

const StyledPopper = styled(Popper)(({ theme }) => ({
  [`& .${autocompleteClasses.listbox}`]: {
    boxSizing: 'border-box',
    '& ul': {
      padding: 0,
      margin: 0,
    },
  },
}));

const VirtualizedAutocomplete = () => {
  const classes = useStyles();

  return (
    <Autocomplete
      id="virtualized-autocomplete"
      disableListWrap
      PopperComponent={StyledPopper}
      ListboxComponent={ListboxComponent}
      options={top100Films}
      getOptionLabel={(option) => option.title}
      renderInput={(params) => <TextField {...params} label="Virtualized Autocomplete" variant="outlined" fullWidth />}
      renderOption={(props, option, state) => [props, option.title]}
      style={{ width: 300 }}
    />
  );
};

// Example data for autocomplete
const top100Films = [
  { title: 'The Shawshank Redemption', year: 1994 },
  { title: 'The Godfather', year: 1972 },
  { title: 'The Godfather: Part II', year: 1974 },
  // Add more items here
];

export default VirtualizedAutocomplete;

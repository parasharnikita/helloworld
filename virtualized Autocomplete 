import React from 'react';
import { useAutocomplete } from '@mui/base';
import { TextField, Popper, Paper, ListSubheader } from '@mui/material';
import { VariableSizeList } from 'react-window';
import { makeStyles } from '@mui/styles';

const useStyles = makeStyles((theme) => ({
  listbox: {
    boxSizing: 'border-box',
    '& ul': {
      padding: 0,
      margin: 0,
    },
  },
}));

const LISTBOX_PADDING = 8; // px

function renderRow(props) {
  const { data, index, style } = props;
  const dataSet = data[index];
  const inlineStyle = {
    ...style,
    top: style.top + LISTBOX_PADDING,
  };

  return (
    <div {...dataSet[0]} style={inlineStyle}>
      {dataSet[1]}
    </div>
  );
}

const OuterElementContext = React.createContext({});

const OuterElementType = React.forwardRef((props, ref) => {
  const outerProps = React.useContext(OuterElementContext);
  return <div ref={ref} {...props} {...outerProps} />;
});

function useResetCache(data) {
  const ref = React.useRef(null);
  React.useEffect(() => {
    if (ref.current != null) {
      ref.current.resetAfterIndex(0, true);
    }
  }, [data]);
  return ref;
}

const ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {
  const { children, ...other } = props;
  const itemData = [];
  children.forEach((item) => {
    itemData.push(item);
    itemData.push(...(item.children || []));
  });

  const itemCount = itemData.length;
  const itemSize = 36;

  const getChildSize = (child) => {
    if (child.hasOwnProperty('group')) {
      return 48;
    }
    return itemSize;
  };

  const getItemSize = (index) => getChildSize(itemData[index]);

  const gridRef = useResetCache(itemCount);

  return (
    <div ref={ref}>
      <OuterElementContext.Provider value={other}>
        <VariableSizeList
          itemData={itemData}
          height={250}
          width="100%"
          ref={gridRef}
          outerElementType={OuterElementType}
          innerElementType="ul"
          itemSize={getItemSize}
          itemCount={itemCount}
          overscanCount={5}
        >
          {renderRow}
        </VariableSizeList>
      </OuterElementContext.Provider>
    </div>
  );
});

function VirtualizedAutocomplete() {
  const classes = useStyles();
  const {
    getRootProps,
    getInputLabelProps,
    getInputProps,
    getListboxProps,
    getOptionProps,
    groupedOptions,
    value,
    focused,
    setAnchorEl,
  } = useAutocomplete({
    id: 'virtualized-autocomplete',
    options: top100Films,
    getOptionLabel: (option) => option.title,
  });

  return (
    <div {...getRootProps()}>
      <TextField
        label="Virtualized Autocomplete"
        variant="outlined"
        InputLabelProps={getInputLabelProps()}
        InputProps={getInputProps()}
        fullWidth
      />
      <Popper open={focused} anchorEl={setAnchorEl.current} className={classes.listbox}>
        <Paper>
          <ListboxComponent {...getListboxProps()}>
            {groupedOptions.map((option, index) => (
              <li {...getOptionProps({ option, index })}>{option.title}</li>
            ))}
          </ListboxComponent>
        </Paper>
      </Popper>
    </div>
  );
}

// Example data for autocomplete
const top100Films = [
  { title: 'The Shawshank Redemption', year: 1994 },
  { title: 'The Godfather', year: 1972 },
  { title: 'The Godfather: Part II', year: 1974 },
  // Add more items here
];

export default VirtualizedAutocomplete;
